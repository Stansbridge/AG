#!/bin/bash

USAGE="$0 [-v] [-h] [status|start|stop|destroy|restart]"

#############
# FUNCTIONS #
#############

source $HOME/.openagrc
source $(dirname $0)/openag.functions.sh

############################
# Check config and folders #
############################

which docker > /dev/null
if [ "$?" != 0 ]; then
    echo "You need to install docker for the dockers to work"
    echo "Check here: https://www.docker.com/get-docker"
    exit 1
fi

OAGHOME=$HOME/.openag
OAGCONF=$OAGHOME/openag.conf

# If we don't have a home then create it
if [ ! -d "$OAGHOME" ]; then
    echo "Creating openag home:"
    echo "    -> $OAGHOME"
    mkdir -p $OAGHOME
fi

# If we don't have default config write some
if [ ! -f "$OAGCONF" ]; then
    echo "Creating openag default config:"
    echo "    -> $OAGCONF"
    cat <<EOF > $OAGCONF
# These locations set where data should be persisted to. If you change these
# you need to delete the tmux.conf file above, or edit it.
PERSIST_DIR=\$OAGHOME/data
PERSIST_COVE_MEDIA=\$PERSIST_DIR/cove/media
PERSIST_GEO_DATA=\$PERSIST_DIR/geocoder/data
PERSIST_GEO_UPLOADS=\$PERSIST_DIR/geocoder/uploads
PERSIST_GEO_CONF=\$PERSIST_DIR/geocoder/conf
PERSIST_MYSQL=\$PERSIST_DIR/mysql
PERSIST_PGSQL=\$PERSIST_DIR/pgsql
PERSIST_REDIS=\$PERSIST_DIR/redis
PERSIST_CLASSIFIER=\$PERSIST_DIR/classifier
EOF
fi

# Import default config
source $OAGCONF

for path in $PERSIST_COVE_MEDIA $PERSIST_GEO_DATA $PERSIST_GEO_UPLOADS $PERSIST_GEO_CONF $PERSIST_MYSQL $PERSIST_PGSQL $PERSIST_REDIS $PERSIST_CLASSIFIER; do
    if [ ! -d "$path" ]; then
        mkdir -p $path
    fi
done

if [ ! -f "$PERSIST_GEO_CONF/settings.json" ]; then
    wget -O $PERSIST_GEO_CONF/settings.json https://raw.githubusercontent.com/neontribe/AG/develop/geocoder/conf/settings.json
fi

#####################
# Process Arguments #
#####################

VERBOSE=0

while getopts "hv" options; do
	case $options in
		v) VERBOSE=1;;
		h) usage; exit 0;;
    esac
done

shift $((OPTIND-1))
ACTION=$1
if [ -z "$ACTION" ]; then
    ACTION='status'
fi

if [ $ACTION != 'status' ] && [ $ACTION != 'start' ] && [ $ACTION != 'stop' ] && [ $ACTION != 'restart' ] && [ $ACTION != 'destroy' ] && [ $ACTION != 'update' ]; then
	echo $USAGE
	exit 1;
fi

if [ -z "$MYSQL_ROOT_PASSWORD" ]; then
    echo "Mysql root password is not set."
    echo "echo 'export MYSQL_ROOT_PASSWORD=somemysqlpassword' > ~/.openagrc"
    exit 1
fi

###########
# ACTIONS #
###########

DOCKERS=`echo $@ | sed -e 's/^\w*\ *//'`
IDS=
for DOCKER in $DOCKERS; do
    ID=$(docker ps -a -q --filter name=openag_${DOCKER} --format="{{.ID}}")
    if [ ! -z "$ID" ]; then
        IDS="$ID $IDS"
    fi
done

if [ -z "$IDS" ]; then
    IDS=$(docker ps -a -q --filter name=openag_ --format="{{.ID}}")
    IDS=$(echo $IDS | sed -e "s/\n/ /g")
fi

if [ -z "$DOCKERS" ]; then
    DOCKERS="mysql pgsql redis cove geocoder oipa dportal master"
    SYSMEM=$(free|awk '/^Mem:/{print $2}')
    if [ "$SYSMEM" -lt 33554432 ]; then
        echo "Insufficient memory to run the classifier"
    else
        DOCKERS="$DOCKERS classifier"
    fi
fi

if [ "0" != "$VERBOSE" ]; then
    echo "IDS=$IDS"
    echo "DOCKERS=$DOCKERS"
fi

case $ACTION in
    status)
      docker ps -a --filter name=openag_;;
    start)
        start_dockers $DOCKERS;;
    stop)
        stop_dockers $IDS;;
    destroy)
        destroy_dockers $IDS;;
    update)
        update_dockers $IDS;;
    restart)
        stop_dockers
        start_dockers;;
esac
